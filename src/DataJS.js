export const data = [
  {
    id: 1,
    level: "junior",
    number: "01",
    question: "What are the data types in JS?",
    questionCode: [],
    answerQuestion: [
      "String | Number | Boolean | Null | Undefined | Symbol | BigInt | Object",
      "Programming languages that allow such things, such as JavaScript, are called “dynamically typed”, meaning that there exist data types, but variables are not bound to any of them.",
      "A string in JavaScript must be surrounded by quotes.",
      "The number type represents both integer and floating point numbers.",
      "The boolean type has only two values: true and false.",
      "The special null value does not belong to any of the types described above.",
      "The meaning of undefined is “value is not assigned”.",
      "The symbol type is used to create unique identifiers for objects. We have to mention it here for the sake of completeness, but also postpone the details till we know objects.",
      "BigInt type was recently added to the language to represent integers of arbitrary length.",
      "All other types are called “primitive” because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities.",
      "The typeof operator returns the type of the argument. It’s useful when we want to process values of different types differently or just want to do a quick check.",
      "A call to typeof x returns a string with the type name:",
    ],
    answerCode: [
      `
      typeof undefined // "undefined"`,

      `typeof 0 // "number"`,

      `typeof 10n // "bigint"`,

      `typeof true // "boolean"`,

      `typeof "foo" // "string"`,

      `typeof Symbol("id") // "symbol"`,

      `typeof Math // "object"`,

      `typeof null // "object"`,

      `typeof alert // "function"`,
    ],
    answerLinks: [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures",
      "https://en.wikipedia.org/wiki/JavaScript_syntax#Primitive_data_types",
    ],
  },
  {
    id: 2,
    level: "junior",
    number: "02",
    question: "How do I check if an object is an array?",
    questionCode: [],
    answerQuestion: [
      "Use the Array.isArray() method",
      "The Array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, and has members for performing common array operations.",
    ],
    answerCode: [
      `// Creating some variables`,
      `var v1 = {name: "John", age: 18};`,
      `var v2 = ["red", "green", "blue", "yellow"];`,
      `var v3 = [1, 2, 3, 4, 5];`,
      `var v4 = null;`,
      "",
      `// Testing the variables data type`,
      `typeof(v1); // Returns: "object"`,
      `typeof(v2); // Returns: "object"`,
      `typeof(v3); // Returns: "object"`,
      `typeof(v3); // Returns: "object"`,
      "",
      `// Testing if the variable is an array`,
      ` Array.isArray(v1);  // Returns: false`,
      `Array.isArray(v2);  // Returns: true`,
      `Array.isArray(v3);  // Returns: true`,
      `Array.isArray(v4);  // Returns: false`,
    ],
    answerLinks: [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",
    ],
  },
  {
    id: 3,
    level: "junior",
    number: "03",
    question: "How to check if a number is finite?",
    questionCode: [],
    answerQuestion: [
      "Use the isFinite() or Number.isFinite()",
      "isFinite() returns true if a value is a finite number.",
      "Number.isFinite() returns true if a number is a finite number.",
    ],
    answerCode: [
      `isFinite(5 / 2) // Returns: true`,
      `isFinite(0) // Returns: true`,
      `isFinite(123) // Returns: true`,
      `isFinite(Infinity) // Returns: false`,
      "",
      `Number.isFinite(5/2) // Returns: true`,
      `Number.isFinite(0) // Returns: false`,
      `Number.isFinite(0/0) // Returns: false`,
      `Number.isFinite(NaN) // Returns: false`,
    ],
    answerLinks: [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite",
    ],
  },
  {
    id: 4,
    level: "junior",
    number: "04",
    question: "How to check that the variable is equal to NaN?",
    questionCode: [],
    answerQuestion: ["Use the Number.isNaN() or isNan() method"],
    answerCode: [
      `Number.isNaN({}); // Returns: false, {} is not NaN`,
      `Number.isNaN('ponyfoo') // Returns: false, 'ponyfoo' is not NaN`,
      `Number.isNaN(NaN) // Returns: true, NaN is NaN`,
      `Number.isNaN('pony'/'foo') // Returns: true, 'pony'/'foo' is NaN, NaN is NaN`,
      "",
      `isNaN({}); // Returns: true, {} is not a number`,
      `isNaN('ponyfoo') // Returns: true, 'ponyfoo' is not a number`,
      `isNaN(NaN) // Returns: true, NaN is not a number`,
      `isNaN('pony'/'foo') // Returns: true, 'pony'/'foo' is NaN, NaN is not a number`,
    ],
    answerLinks: [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN",
    ],
  },
  {
    id: 5,
    level: "junior",
    number: "05",
    question:
      "What is the difference between the behavior of isNaN () and Number.isNaN ()?",
    questionCode: [],
    answerQuestion: [
      "The isNaN() - function and Number.isNaN() - method",
      "Global isNaN() function first converts the argument to a number, and then returns true if the resulting value is NaN.",
      "Number.isNaN() returns true if and only if the argument is of type Number and the value equals to NaN.",
    ],
    answerCode: [
      `Number.isNaN({}); // Returns: false, {} is not NaN`,
      `Number.isNaN('ponyfoo') // Returns: false, 'ponyfoo' is not NaN`,
      `Number.isNaN(NaN) // Returns: true, NaN is NaN`,
      `Number.isNaN('pony'/'foo') // Returns: true, 'pony'/'foo' is NaN, NaN is NaN`,
      "",
      `isNaN({}); // Returns: true, {} is not a number`,
      `isNaN('ponyfoo') // Returns: true, 'ponyfoo' is not a number`,
      `isNaN(NaN) // Returns: true, NaN is not a number`,
      `isNaN('pony'/'foo') // Returns: true, 'pony'/'foo' is NaN, NaN is not a number`,
    ],
    answerLinks: [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN",
    ],
  },
  {
    id: 6,
    level: "junior",
    number: "06",
    question: "Compare keywords var, let, const.",
    questionCode: [],
    answerQuestion: [
      "Variable declaration var, let, and const",
      "let is now preferred for variable declaration. It's no surprise as it comes as an improvement to var declarations. It also solves the problem with var that we just covered. Le's consider why this is so.",
      "The let keyword should be used in situations where you want to declare a variable that should be restricted to the block in which it is restricted. ",
      "The const keyword follows the same rules as the let keyword. The only difference with const is that const is used to define only constant values in JavaScript programs.",
    ],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 7,
    level: "junior",
    number: "07",
    question: "What is the scope?",
    questionCode: [],
    answerQuestion: [
      "The scope is the current context of execution",
      'The current context of executionin which values and expressions are "visible" or can be referenced.',
      "If a variable or expression is not in the current scope, it will not be available for use. Scopes can also be layered in a hierarchy, so that child scopes have access to parent scopes, but not vice versa.",
      "JavaScript has the following kinds of scopes:",
      "Global scope: The default scope for all code running in script mode.",
      "Module scope: The scope for code running in module mode.",
      "Function scope: The scope created with a function.",
      "In addition, variables declared with let or const can belong to an additional scope:",
      "Block scope: The scope created with a pair of curly braces (a block).",
      "A function creates a scope, so that (for example) a variable defined exclusively within the function cannot be accessed from outside the function or within other functions. For instance, the following is invalid",
    ],
    answerCode: [],
    answerLinks: "https://developer.mozilla.org/en-US/docs/Glossary/Scope",
  },
  {
    id: 8,
    level: "junior",
    number: "08",
    question: "What is destructuring?",
    questionCode: [],
    answerQuestion: [],
    answerCode: [],
    answerLinks:
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",
  },
  {
    id: 9,
    level: "junior",
    number: "09",
    question: "What are the setTimeout and setInterval methods for?",
    questionCode: [],
    answerQuestion: ["https://javascript.info/settimeout-setinterval"],
    answerCode: [],
    answerLinks: "https://developer.mozilla.org/en-US/docs/Web/API/setTimeout",
  },
  {
    id: 10,
    level: "junior",
    number: "10",
    question:
      "Compare approaches to working with asynchronous code: callbacks vs promises vs async / await.",
    questionCode: [],
    answerQuestion: [],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 11,
    level: "junior",
    number: "11",
    question: `Is it possible to write new properties / functions in prototypes of standard classes (Array, Object, etc.)? Why not? In what cases it is possible to do it? How to insure yourself if you need to expand the prototype?`,
    questionCode: [],
    answerQuestion: [],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 12,
    level: "junior",
    number: "12",
    question:
      "Name the methods of the arrays you remember and say why you need them?",
    questionCode: [],
    answerQuestion: [],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 13,
    level: "junior",
    number: "13",
    question:
      "What sorting methods of an array do you know? What is their difference?",
    questionCode: [],
    answerQuestion: [],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 14,
    level: "junior",
    number: "14",
    question:
      "How do assignment / comparison / string / arithmetic / bit, etc. operators work?",
    questionCode: [],
    answerQuestion: [],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 15,
    level: "junior",
    number: "15",
    question:
      "Describe the purpose and principles of working with the Map and Set collections. What is destructuring?",
    questionCode: [],
    answerQuestion: [],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 16,
    level: "junior",
    number: "16",
    question:
      "What do deep and shallow copies of an object mean? How to make each of them?",
    questionCode: [],
    answerQuestion: [],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 17,
    level: "junior",
    number: "17",
    question:
      "What is the difference between a function declaration and a function expression?",
    questionCode: [],
    answerQuestion: ["function sum(a, b) | var sum = function(a, b)"],
    answerCode: [],
    answerLinks:
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions",
  },
  {
    id: 18,
    level: "junior",
    number: "18",
    question: "What is an anonymous function?",
    questionCode: [],
    answerQuestion: [
      "!An anonymous function is not accessible after its initial creation!",
      "Anonymous Function is a function that does not have any name associated with it. Normally we use the function keyword before the function name to define a function in JavaScript, however, in anonymous functions in JavaScript, we use only the function keyword without the function name.",
    ],
    answerCode: [
      "function() { // Function Body }",
      "( () => { // Function Body... } )();",
    ],
    answerLinks: "",
  },
  {
    id: 19,
    level: "junior",
    number: "19",
    question:
      "Tell us about arrow functions. What are the differences between arrow functions and ordinary ones?",
    questionCode: [],
    answerQuestion: [""],
    answerCode: [],
    answerLinks:
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
  },
  {
    id: 20,
    level: "junior",
    number: "20",
    question:
      "What is IIFE (Immediately Invoked Function Expression) and what is it used for?",
    questionCode: [],
    answerQuestion: [],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 21,
    level: "junior",
    number: "21",
    question: "What is hoisting, how does it work for variables and functions?",
    questionCode: [],
    answerQuestion: [],
    answerCode: [`23234242424`],
    answerLinks: "",
  },
  {
    id: 22,
    level: "junior",
    number: "22",
    question: "What is closure and what are the scenarios for its use?",
    questionCode: [],
    answerQuestion: [],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 23,
    level: "junior",
    number: "23",
    question:
      "How do you understand the circuit? What will be displayed in the console in this case?",
    questionCode: [
      `var f = function() {`,
      `console.log(1);`,
      `};`,
      ``,
      `var execute = function(f) {`,
      `setTimeout(f, 1000);`,
      `};`,
      ``,
      `execute(f);`,
      ``,
      `f = function() {`,
      `console.log(2);`,
      `};`,
      ``,
      `var f = function() {`,
      ` execute = function(f) {`,
      ` setTimeout(f, 1000);`,
      ` }`,
      `};`,
    ],
    answerQuestion: [],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 24,
    level: "junior",
    number: "24",
    question: "What is recursion?",
    questionCode: [],
    answerQuestion: [],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 25,
    level: "junior",
    number: "25",
    question: `What does the keyword "this" mean?`,
    questionCode: [],
    answerQuestion: [
      // "What About this?",
      // "The handling of <this> is also different in arrow functions compared to regular functions.",
      // "In short, with arrow functions there are no binding of <this>.",
      // "In regular functions the <this> keyword represented the object that called the function, which could be the window, the document, a button or whatever.",
      // "With arrow functions the this keyword always represents the object that defined the arrow function.",
      // "Let us take a look at two examples to understand the difference.",
      // "Both examples call a method twice, first when the page loads, and once again when the user clicks a button.",
      // "The first example uses a regular function, and the second example uses an arrow function.",
      // 'The result shows that the first example returns two different objects (window and button), and the second example returns the window object twice, because the window object is the "owner" of the function.',
    ],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 26,
    level: "junior",
    number: "26",
    question:
      "What is context loss, when does it occur and how can it be prevented?",
    questionCode: [],
    answerQuestion: [],
    answerCode: [],
    answerLinks: "",
  },
  {
    id: 27,
    level: "junior",
    number: "27",
    question:
      "Methods of bind / call / apply functions - why and what is the difference?",
    questionCode: [],
    answerQuestion: [],
    answerCode: [],
    answerLinks: "",
  },
];

export default data;
